package es.studium.Farmacia;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;

public class BaseDatos
{
	String driver = "com.mysql.cj.jdbc.Driver"; 
	String url = "jdbc:mysql://localhost:3306/farmacia_pr"; 
	String login = "farmacia"; // Usuario MySQL
	String password = "Studium2021;"; // Su clave correspondiente
	String sentencia = "";
	Connection connection = null; 
	Statement statement = null;

	public BaseDatos()
	{

	}

	public Connection conectar()
	{
		try
		{
			//Cargar los controladores para el acceso a la BD
			Class.forName(driver);
			//Establecer la conexión con la BD Empresa
			connection = DriverManager.getConnection(url, login, password);
		}
		catch (ClassNotFoundException cnfe)
		{}
		catch (SQLException sqle)
		{}
		return connection;
	}

	public int consultar(String sentencia)
	{
		int resultado = -1;
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			//Crear un objeto ResultSet para guardar lo obtenido
			//y ejecutar la sentencia SQL
			rs = statement.executeQuery(sentencia);
			if(rs.next()) // Si hay, al menos uno
			{
				resultado = rs.getInt("tipoUsuario");
			}
		}
		catch (SQLException sqle)
		{}
		return resultado;
	}

	public String consultarClientes()
	{
		String contenido = "";
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			//Crear un objeto ResultSet para guardar lo obtenido
			//y ejecutar la sentencia SQL
			rs = statement.executeQuery("SELECT * FROM clientes");
			while(rs.next()) // Si hay, al menos uno
			{
				contenido = contenido + rs.getInt("idCliente") +
						" "+ rs.getString("dniCliente") + " " +
						rs.getString("nombreCliente") + " " +
						rs.getString("apellidosCliente") + " " +
						rs.getString("domicilioCliente") + " " +
						rs.getString("telefonoCliente") + " " +
						rs.getString("poblacionCliente") + " " +
						rs.getString("correoElectronicoCliente") + "\n";
			}
		}
		catch (SQLException sqle)
		{}
		return(contenido);
	}

	public int insertarCliente(String sentencia)
	{
		int resultado = 0; // Éxito
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el INSERT
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}

	public ResultSet rellenarClientes()
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM clientes");
		}
		catch (SQLException sqle)
		{}
		return (rs);
	}

	public int borrarCliente(int idCliente)
	{
		int resultado = 0;
		// Devolver un 0 --> Borrado éxito
		// Devolver un -1 --> Borrado error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el DELETE
			String sentencia = "DELETE FROM clientes WHERE idCliente="+idCliente;
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}

	public ResultSet consultarCliente(String idCliente)
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM clientes WHERE idCliente = "+idCliente);
		}
		catch (SQLException sqle)
		{
			System.out.println(sqle.getMessage());
		}
		return (rs);
	}

	public int actualizarCliente(String idCliente, String dniNuevo, String nombreNuevo, String apellidosNuevo, 
			String domicilioNuevo, String telefonoNuevo, String poblacionNuevo, String correoNuevo)
	{
		int resultado = 0;
		String sentencia = "UPDATE clientes SET dniCliente='"+dniNuevo+"', nombreCliente = '"+nombreNuevo+"',"
				+ "apellidosCliente='"+apellidosNuevo+"', domicilioCliente='"+domicilioNuevo+"', "
				+ "telefonoCliente='"+telefonoNuevo+"', poblacionCliente='"+poblacionNuevo+"',"
				+ "correoElectronicoCliente='"+correoNuevo+"'  WHERE idCliente = " + idCliente;
		// Devolver un 0 --> Modificación con éxito
		// Devolver un -1 --> Modificación error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el UPDATE
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}

	public String consultarFacturas()
	{
		String contenido = "";
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			//Crear un objeto ResultSet para guardar lo obtenido
			//y ejecutar la sentencia SQL
			rs = statement.executeQuery("SELECT * FROM facturas");
			while(rs.next()) // Si hay, al menos uno
			{
				contenido = contenido + rs.getInt("codigoFactura") +
						" "+ rs.getString("fechaFactura") + " " +
						rs.getString("totalFactura") + " " +
						rs.getString("idClienteFK") + "\n";
			}
		}
		catch (SQLException sqle)
		{}
		return(contenido);
	}

	public int insertarFactura(String fecha, String total, String idCliente)
	{
		int resultado = 0; // Éxito
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			String sentencia = "INSERT INTO facturas VALUES(null, " + "'" + fecha + "', '" + total + "', '" + idCliente + "');";
			// Ejecutar el INSERT
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}

	public ResultSet rellenarFacturas()
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM facturas");
		}
		catch (SQLException sqle)
		{}
		return (rs);
	}

	public int borrarFactura(int codigoFactura)
	{
		int resultado = 0;
		// Devolver un 0 --> Borrado éxito
		// Devolver un -1 --> Borrado error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el DELETE
			String sentencia = "DELETE FROM facturas WHERE codigoFactura="+codigoFactura;
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}

	public ResultSet consultarFactura(String codigoFactura)
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM facturas WHERE codigoFactura = "+codigoFactura);
		}
		catch (SQLException sqle)
		{
			System.out.println(sqle.getMessage());
		}
		return (rs);
	}

	public int actualizarFactura(String codigoFactura, String fechaNueva, String totalNuevo, String idClienteFK)
	{
		int resultado = 0;
		String sentencia = "UPDATE facturas SET fechaFactura='"+fechaNueva+"', totalFactura = '"+totalNuevo+"',"
				+ "idClienteFK='"+idClienteFK+"'  WHERE codigoFactura = " + codigoFactura;
		// Devolver un 0 --> Modificación con éxito
		// Devolver un -1 --> Modificación error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el UPDATE
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}
	public String consultarProductos()
	{
		String contenido = "";
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			//Crear un objeto ResultSet para guardar lo obtenido
			//y ejecutar la sentencia SQL
			rs = statement.executeQuery("SELECT * FROM productos");
			while(rs.next()) // Si hay, al menos uno
			{
				contenido = contenido + rs.getInt("codigoProducto") +
						"-"+ rs.getString("descripcionProducto") + "-" +
						" "+ rs.getString("precioProducto") + "-" +
						rs.getString("cantidadProducto") + "\n";
			}
		}
		catch (SQLException sqle)
		{}
		return(contenido);
	}
	public int insertarProducto(String sentencia)
	{
		int resultado = 0; // Éxito
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el INSERT
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}
	public ResultSet rellenarProductos()
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM productos");
		}
		catch (SQLException sqle)
		{}
		return (rs);
	}

	public int borrarProducto(int codigoProducto)
	{
		int resultado = 0;
		// Devolver un 0 --> Borrado éxito
		// Devolver un -1 --> Borrado error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el DELETE
			String sentencia = "DELETE FROM productos WHERE codigoProducto="+codigoProducto;
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}
	public ResultSet consultarProducto(String codigoProducto)
	{
		ResultSet rs = null;
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el SELECT
			rs = statement.executeQuery("SELECT * FROM productos WHERE codigoProducto = "+codigoProducto);
		}
		catch (SQLException sqle)
		{
			System.out.println(sqle.getMessage());
		}
		return (rs);
	}

	public int actualizarProducto(String codigoProducto, String descripcionNueva, String precioNuevo, String cantidadNueva)
	{
		int resultado = 0;
		String sentencia = "UPDATE productos SET descripcionProducto='"+descripcionNueva+"', precioProducto = '"+precioNuevo+"',"
				+ "cantidadProducto='"+cantidadNueva+"'  WHERE codigoProducto = " + codigoProducto;
		// Devolver un 0 --> Modificación con éxito
		// Devolver un -1 --> Modificación error
		try
		{
			//Crear una sentencia
			statement = connection.createStatement();
			// Ejecutar el UPDATE
			statement.executeUpdate(sentencia);
		}
		catch (SQLException sqle)
		{
			resultado = -1; // Error
		}
		return(resultado);
	}
	
	// Escritura
	
	public String escritura(String resultado) {
		String informacion = "";
		
		try
		{
			FileWriter fw = new FileWriter ("movimientos.log", true);
			BufferedWriter bw = new BufferedWriter(fw);
			PrintWriter salida = new PrintWriter(bw);
			String tiempo;
			tiempo = fechaRegistro();
			informacion = "["+tiempo+"]" + resultado;
			salida.println(informacion);
			salida.close();
			bw.close();
			fw.close();
		}
		catch(IOException ioe)
		{
			System.out.println(ioe.getMessage());
		}
		
		return (informacion);
	}
	
	// Fecha y hora
	
	public String fechaRegistro() {
		Date fecha;
		SimpleDateFormat tiempo;
		fecha = new Date();
		tiempo = new SimpleDateFormat("dd-MM-yyyy H:mm:ss");
		System.out.println(tiempo.format(fecha));
		return tiempo.format(fecha);
	}

	public void desconectar()
	{
		try
		{
			if(connection!=null)
			{
				connection.close();
			}
		}
		catch (SQLException e)
		{}
	}
}
